Program AshamanAltars;
  {$Define Smart}
  {$I SRL/SRL.Simba}
  {$I SRL/SRL/Misc/Debug.Simba}

Var
  PTS: Integer;

{
AshamanAltars V1.13
-READ THE OP TOPIC BEFORE ATTEMPTING TO USE
-Start at CW bank (or Tzhaar if using that option)
-Have Teletohousetabs in your inventory (recommend 1st inventory slot)
-Make sure the bones you want to use are in the TOP RIGHT slot of your bank
-Make sure rings of dueling (if using) and marrentil are visible in bank, try not to have too much green stuff similar to them in same tab.
-If using Tzhaar ring, make sure you start with it equipped.
-If using a familiar, have spare pouches and summoning pots visible in bank tab.
-If using a familiar, make sure left click option is set to "take bob"
-Make sure to fill in the required info below.
}

///////////////////////////////////////////////////////////////////////
//                                                                   //
//                  Begin of user setup                              //
//                Fill in the fields below                           //
//                                                                   //
///////////////////////////////////////////////////////////////////////

Const
  SRLStats_Username = '';     // ***Leave blank if you don't have a stats account***
  SRLStats_Password = '';
  RingType          = '';     // ***Which type of ring are you using? (Duel,TzHaar)***
  AltarDirection    = '';     // ***Cardinal direction from entrance to where your altar room is (N,E,S,W)***
  HouseDesign       = '';     // ***House style (Zenev,BasicWood,BasicStone,Tropical)***   --HIGHLY RECOMMEND BASIC STONE
  BurnerType        = '';     // ***Which type of burner do you have? (Oak,Mahogany,Marble)***
  AltarPlace        = '';     // ***From the doorway is your altar at the top of the room or side? (Top, or Side)*** --SEE PICS IN OP
  BoneOrAshType     = '';     // ***What type of bone or ash are you using? (Dragon,BabyDragon,..etc) Only for progress report purposes only***
  UseAutoChecker    = True;   // ***Auto checks for most updated version and dowloads it.***

Procedure DeclarePlayers;
Begin
  HowManyPlayers := 1;
  NumberOfPlayers(HowManyPlayers);
  CurrentPlayer := 0;
  With Players[0] Do
  Begin
    Name        := '';         // ***RS Username***
    Pass        := '';         // ***RS Pass***
    Pin         := '';         // ***RS Pin***
    PTS         := 0;          // ***Pouch to summon, 1 for terrorbird, 2 for wartort, 3 for yak, 0 for nothing***
    BoxRewards  := ['Coins', 'oins'];
    Active      := True;
  End;
End;

///////////////////////////////////////////////////////////////////////////////////////////
//                                                                                       //
//                            End of user setup                                          //
//           Don't touch below this line unless you know what you're doing!!             //
//                                                                                       //
///////////////////////////////////////////////////////////////////////////////////////////


Const
  ScriptVersion = '1.13' ;
  Debug = False;

Var
 BankTime,Ring,HerbDTM,RingDTM,TabDTM,BoneCount,XP,StartTime,StartingExperience,BonesPH,XPH,DoorX1,DoorY1,DoorX2,DoorY2: Integer;
 DoorHue,DoorSat,BurnerHue,BurnerSat,Afound: Extended;
 DoorColor,DoorTolerance,SummoningTimer,Summoning,Empty,BurnerColor,BurnerTolerance,TRingDTM,MaxTime: Integer;
 Pouch,AltarX1,AltarY1,AltarX2,AltarY2, NewPouch,Bones,Lengths,MaxLength,BurnerLength,FailedBurners: Integer;
 BounceX,BounceY,TzhaarDTM,AltarDTM,M: Integer;
 Direction: String;
 StartSummon,Walk,ClickLefts,FailDTM,NoFamiliar: Boolean;

Procedure SetDTM;
Begin
  TabDTM := DTMFromString('mQwAAAHicY2ZgYMhlYmBIAeIyIH4E5L8D4vdAvGj2bIaosDCG4IAABhEgH4YZkTAQAABZdggg');
  HerbDTM := DTMFromString('mWAAAAHicY2FgYJjOCMHzgLgfiI8AxfYC8UEgPgrEPGF8DHzJAhCcLsjADxRDxoxoGAQA1cYHow==');
  RingDTM := DTMFromString('mWAAAAHicY2FgYGAFYk4GCOACYg4omweKXVwcGESnSzKsmCDBUJ0lyGAEFEPGjGgYBADTGwTc');
  TRingDTM := DTMFromString('mQwAAAHicY2ZgYNjOxMBwAIi3AnELIwNDNRBXAfGDPbUMF9aXMBxZksvAD1QHw4xIGAgAlsAJww==');
  Summoning := DTMFromString('mWAAAAHicY2FgYHBigmBXIPYEYn1GBgYrILaE4vz8Ega5a3cZZC/dBKpmYkgBkuxImBENgwAAgewHaA==');
  Empty := DTMFromString('mbQAAAHicY2VgYHBkYmBwBWJ7KHYDYh5GBgYOKBYDYhEgTkxMZbC1c2BIS8tmiE9IYQgKDmPgAupHx4xYMBgAAMSrBxM=');
  TzhaarDTM := DTMFromString('mQwAAAHicY2ZAAEYglgJiLSg/PjqawcbSkuHbIxcGGSAfhhmRMBAAAJYPBH8=');
  AltarDTM := DTMFromString('mggAAAHicY2NgYJgBxJuAuAWKVwHxLCC+CsSngfgsEF8D4htAfAKIFy1exXD/7lWGRw/uMLx8+ZzhwYObDNd2yjPwA+WwYUYcGAIAKncW/g==');
End;

Procedure F33DTM;
Begin
  FreeDTM(TabDTM);
  FreeDTM(HerbDTM);
  FreeDTM(RingDTM);
  FreeDTM(TRingDTM);
  FreeDTM(Summoning);
  FreeDTM(Empty);
  FreeDTM(Pouch);
  FreeDTM(TzhaarDTM);
  FreeDTM(AltarDTM);
End;

Procedure ProgressReport;
Begin
  If Not Debug Then
    ClearDebug;

  BoneCount := BoneCount + Bones;
  XP := (GetXPBarTotal - StartingExperience);
  XPH := Round(XP * (3600.0 / (GetTimeRunning / 1000.0)));
  BonesPH := Round((BoneCount * (3600.0 / (GetTimeRunning / 1000.0))));

  Writeln('=========AshamanAltars=========');
  Writeln('=========Version: '+ScriptVersion+'=========');
  Writeln('Time Running: ' + TimeRunning);
  Writeln('Item Type: ' + BoneorAshType);
  Writeln('Bones&Ashes Used: ' + IntToStr(BoneCount));
  Writeln('Experience Earned: ' + IntToStr(XP));
  Writeln('Experience/Hour: ' + IntToStr(XPH));
  Writeln('Bones&Ashes/H: ' + IntToStr(BonesPH));
  Writeln('===============================');

  Stats_Commit;
End;

 {*******************************************************************************

By: Shuttleu , edited

*******************************************************************************}


//Please note that almost all of this code was written by Harry, i just edited it a bit
procedure AutoUpdateMe;
var Neifile:integer;
    OnlineVersion, NewScript, NeiFeilNennen:string;
begin
  if UseAutoChecker then
  begin
    writeln('Checking for script updates...');
    OnlineVersion := GetPage('http://ashamanaltars.googlecode.com/git/Version.txt');
    writeln(OnlineVersion);
    writeln(ScriptVersion)
    if (trim(OnlineVersion) > ScriptVersion) then
    begin
      writeLn('Newer script version online!');
      writeLn('Autoupdating to newer version.');
      NewScript := GetPage('http://ashamanaltars.googlecode.com/git/AshamanAltars.simba');

      NeiFeilNennen := ScriptPath+ 'AshamanAltars V'+OnlineVersion+' by Ashaman88.simba';
      Neifile := Rewritefile(NeiFeilNennen, true);
      try
        WriteFileString(Neifile, NewScript);
      except
        begin
          writeLn('Fatal error writing to '+NeiFeilNennen+'!!');
          terminatescript;
        end;
      end;
      CloseFile(Neifile);
      writeLn('New script downloaded to '+NeiFeilNennen+'!! Please use this one!!');
      TerminateScript;
    end else
      writeLn('You have the latest version of the script!');
  end else
    WriteLn('!!!!! Not checking for latest version, you may be outdated!');
end;

 {*******************************************************************************

By: GGzz , edited

*******************************************************************************}

Function WaitGameTab(Tab, TimeToWait: Integer): Boolean;
Var
  T: Integer;
begin
  Result := False;
  GameTab(Tab);
  If Debug Then
    Writeln('Waiting on tab '+ToStr(Tab));
  T := GetSystemTime + TimeToWait;
  while (GetSystemTime < T) do
  begin
    if (GetCurrentTab = Tab) then
    begin
      Result := True;
      Exit;
    end;
    Wait(20 + Random(10));
  end;
end;

 {*******************************************************************************

By: Sin , edited

*******************************************************************************}

function WaitInvCountInc(Time:Integer):Boolean;
var
  Inv1,Inv2,t:Integer;
begin
  MarkTime(t);
  Inv1 := InvCount;
  repeat
    wait(10);
    Inv2 := InvCount;
    if TimeFromMark(t) > Time then
    begin
      Result := False;
      Exit;
    end;
  until(Inv2 > Inv1);
  Result := True;
end;

{*******************************************************************************

By: Sin , edited

*******************************************************************************}

function WaitInvCountDec(Time:Integer):Boolean;
var
  Inv1,Inv2,t:Integer;
begin
  MarkTime(t);
  Inv1 := InvCount;
  repeat
    wait(10);
    Inv2 := InvCount;
    if TimeFromMark(t) > Time then
    begin
      Result := False;
      Exit;
    end;
  until(Inv2 < Inv1);
  Result := True;
end;

 {*******************************************************************************

All of these mouse movements are credited to benland100 and flight

*******************************************************************************}


//By Bandland100, modified to shift mouse speeds after every step
Procedure SuperWindMouse(xs, ys, xe, ye, gravity, wind, minWait, maxWait, maxStep, targetArea: extended);
Var
  veloX,veloY,windX,windY,veloMag,dist,randomDist,lastDist,step: extended;
  lastX,lastY,MSP,W: integer;
  sqrt2,sqrt3,sqrt5: extended;
Begin
  MSP  := MouseSpeed;
  sqrt2:= sqrt(2);
  sqrt3:= sqrt(3);
  sqrt5:= sqrt(5);
  While hypot(xs - xe, ys - ye) > 1 Do
  Begin
    dist:= hypot(xs - xe, ys - ye);
    wind:= minE(wind, dist);
    If dist >= targetArea Then
    Begin
      windX:= windX / sqrt3 + (random(round(wind) * 2 + 1) - wind) / sqrt5;
      windY:= windY / sqrt3 + (random(round(wind) * 2 + 1) - wind) / sqrt5;
    End Else
    Begin
      windX:= windX / sqrt2;
      windY:= windY / sqrt2;
      If (maxStep < 3) Then
      Begin
        maxStep:= random(3) + 3.0;
      End Else
      Begin
        maxStep:= maxStep / sqrt5;
      End;
    End;
    veloX:= veloX + windX;
    veloY:= veloY + windY;
    veloX:= veloX + gravity * (xe - xs) / dist;
    veloY:= veloY + gravity * (ye - ys) / dist;
    if hypot(veloX, veloY) > maxStep then
    Begin
      randomDist:= maxStep / 2.0 + random(round(maxStep) div 2);
      veloMag:= sqrt(veloX * veloX + veloY * veloY);
      veloX:= (veloX / veloMag) * randomDist;
      veloY:= (veloY / veloMag) * randomDist;
    End;
    lastX:= Round(xs);
    lastY:= Round(ys);
    xs:= xs + veloX;
    ys:= ys + veloY;

    Case Random(50) Of
      1..25: W := (MSP + (Random((MSP/4))));
      26..50: W := (MSP - (RandomRange((MSP/2), MSP-1)));
    End;
    If (W < 1) Then
      W := 1;

    If (lastX <> Round(xs)) Or (lastY <> Round(ys)) Then
      MoveMouse(Round(xs), Round(ys));

    step:= hypot(xs - lastX, ys - lastY);
    //W := round((maxWait - minWait) * (step / maxStep) + minWait);
    wait(W);
    lastdist:= dist;
  End;

  If (Round(xe) <> Round(xs)) or (Round(ye) <> Round(ys)) Then
    MoveMouse(Round(xe), Round(ye));

  MouseSpeed := MSP;
End;

Procedure HumanMMouse(eX, eY, ranX, ranY: Integer);
Var
  randSpeed: extended;
  X,Y,X2,Y2,j,Dist,MP: integer;
Begin
  j := MouseSpeed;
  GetMousePos(X, Y);
  Y:=Y-50;
  Dist := Distance(X, Y, eX, eY);
  MP := Round(Dist/150);
  If MP < 0 Then
    MP := 1;

  randSpeed := (random(MouseSpeed) / 2.0 + MouseSpeed) / 10.0;
  X2 := RandomRange(eX-(j*MP), eX+(j*MP));
  Y2 := RandomRange(eY-(j*MP), eY+(j*MP));
  SuperWindMouse(X, Y, X2, Y2, 11, 8, 10.0 / randSpeed, 12.0 / randSpeed, 10.0 * randSpeed, 10.0 * randSpeed);
  GetMousePos(X, Y);
  Y:=Y-50;
  MMouse(eX, eY, ranX, ranY);
  MouseSpeed := j;
End;

Function UsingFamiliarFS: Boolean;
Var
  CTS: Integer;
  TPA: TPointArray;
Begin

  CTS:= GetColorToleranceSpeed;
  SetColorToleranceSpeed(2);
  SetColorSpeed2Modifiers(0.18, 0.88);
  Result:= FindColorsTolerance(TPA, 8763221, 692, 130, 721, 160, 21);
  SetColorSpeed2Modifiers(0.2, 0.2);
  ColorToleranceSpeed(CTS);

End;

Function UsingFamiliar: Boolean;              //By Flight.   Modified highly!
Var
  X, Y: Integer;
Begin
  Result := UsingFamiliarFS Or FindColorTolerance(X, Y, 11192179, 695, 130, 720, 155, 20);
  If (Not Result) Then
  Begin
    If FindColorTolerance(X, Y, 3426817, 695, 130, 720, 155, 20) Then
    Begin
      Result:= False;
      If Debug Then
        Writeln('Not using familiar');
      Exit;
    End;

    HumanMMouse(708, 144, 5, 5);

    Repeat
      GetMousePos(X, Y);
      Wait(RandomRange(200,300));
    Until(PointInBox(Point(X, Y), IntToBox(691, 131, 720, 159)));

    Result:= (Not WaitUptextMulti(['elect', 'lect'], RandomRange(200,300)));
  End;


End;

Function SummonPoints: Integer;
Var
  ColourString: String;
Begin
  Result:= GetMMLevels('summon', ColourString);
End;

Function CheckStuff: Boolean;
Begin
  Result:=False;

  If Not LoggedIn Then
    LoginPlayer;

  If FindNormalRandoms Then
  Begin
    If Not LoggedIn Then
      TerminateScript;
    MakeCompass(Direction);
    SetAngle(SRL_ANGLE_HIGH);
    Writeln('Checkstuff is true');
    Result:=True;
  End;
End;

Procedure DismissFamiliar;
Var
  T: Integer;
Label
  FamJump;
Begin
  FamJump:
  If Not LoggedIn Then
    Exit;

  If Debug Then
    Writeln('Attempting to dismiss familiar');

  MouseBox(697,134,712,151,Mouse_Right);

  If WaitOption('miss',2000) Then
  Begin
    If Debug Then
      Writeln('Found option to dismiss');
    MarkTime(T);
    Repeat
      Wait(Random(100));
      If CheckStuff Then
        Break;
      If TimeFromMark(T)>6000 Then
      Begin
        If Debug Then
          Writeln('Didnt find NPC chat, exiting.');
        Break;
      End;
    Until FindNPCChatText('Yes',Nothing);
    If Not FindNPCChatText('Yes',Nothing) Then
      GoTo FamJump;
    TypeSendEx('1',False);
    While UsingFamiliar Do
      Wait(100);
  End;
End;

Function SummoningRenew(PouchToSummon: integer): Boolean;
Var
  X,Y,Tries: Integer;
Begin
  If Not LoggedIn Then
    Exit;

  CheckStuff;

  If PTS=0 Then
  Begin
    If Debug Then
      Writeln('PTS=0');
    Bones:=25;
    Exit;
  End;

  If (GetCurrentTab <> Tab_Inv) Then
    WaitGameTab(Tab_Inv,5000);

  If (Not WaitFindDTMEx(Pouch, X, Y, MIX1, MIY1, MIX2, MIY2,100,5000)) Then
  Begin
    If Debug Then
      Writeln('Did not find pouch in summoning renew function.');
    Exit;
  End;

  If(FindDTM(Summoning,X,Y,MIX1,MIY1,MIX2,MIY2)) Then
    If (SummonPoints < 10) Then
    Begin
      If Debug Then
        Writeln('Need to Refill Summoning Points.');

      If(FindDTM(Summoning, X, Y, MIX1, MIY1, MIX2, MIY2)) Then
      Begin
        If Debug Then
          Writeln('Found summoning potion.');

        HumanMMouse(X,Y,4,4);

        If WaitUptextMulti(['ummoning', 'potion','Summon','poti','tion','ummon','moning'], 500) Then
        Begin
          If Debug Then
            Writeln('Found Drink Uptext.');
          ClickMouse2(False);
          WaitOptionMulti(['rink', 'Drink', 'rink Summoning', 'Drink Summoning'],RandomRange(400,500));
          Wait(RandomRange(2000,2200));
        End;

        If FindDTM(Empty, X, Y, MIX1, MIY1, MIX2, MIY2) Then
        Begin
          HumanMMouse(X,Y,4,4);

          If WaitUptextMulti(['ial', 'Vial'], 500) Then
          Begin
            If Debug Then
              Writeln('Found vial uptext');
            ClickMouse2(False);
            WaitOptionMulti(['Drop', 'rop', 'p Vial', 'Drop Vial'],RandomRange(400,500));
            Wait(RandomRange(2000,2200));
          End;
        End;
      End;
    End;

    If (SummonPoints < 10) then
    Begin
      If Debug Then
        Writeln('Summoning points too low for new familiar and no pot found');
      Exit;
    End;

    Tries:=0;
    If(FindDtm(Pouch, X, Y, MIX1, MIY1, MIX2, MIY2)) Then
    Repeat
      If Debug Then
        Writeln('Found pouch, attempting to summon');

      If UsingFamiliar Then
        Break;

      CheckStuff;
      HumanMMouse(X, Y, 5, 5);
      ClickMouse2(False);
      WaitOption('Summon',500);
      Wait(RandomRange(1000,2000));

      If(FindBlackChatMessage('follower')) Then
        Break;

      Tries:= Tries + 1;

      If (Tries > 5) Then
      Begin
        If Debug Then
          Writeln('Failed to summon familiar');
        Exit;
      End;
    Until(UsingFamiliar);

  MarkTime(SummoningTimer);
  Result:= UsingFamiliar;
End;

Function StoreBOB: Boolean;
Var
  T:integer;
  Jumper: Boolean;
Label
  Jump;
Label
  Restart;
Begin
  If Debug Then
    Writeln('ENTERING STOREBOB FUNCTION');
  Restart:
  Result:=False;
  Jumper:=False;

  If Not Loggedin Then
    Exit;

  CheckStuff;

  If Not UsingFamiliar Then
  Begin
    If Debug Then
      Writeln('No familiar found, exiting function');
    Exit;
  End;

  If Not IsUpTextMultiCustom(['Take','ake','BoB']) Then
    MouseBox(697,134,712,151,Mouse_Right) Else
    ClickMouse2(False);

  If WaitOptionMulti(['act','Inte','Interact','eract'],1500) Then
  Begin
    If Debug Then
      Writeln('Found option to interact with familiar');

    MarkTime(T);
    Repeat
      Wait(100);
      If CheckStuff Then
        Break;
      If TimeFromMark(T)>5000 Then
      Begin
        If Debug Then
          Writeln('Failed to find NPC option');
        Exit;
      End;
    Until FindNPCChatText('tore',Nothing);

    If Not FindNPCChatText('tore',Nothing) Then
      GoTo Restart;

    TypeSendEx('2',False);
  End;

  MarkTime(T);
  Repeat
    InvMouse(RandomRange(6,10),3);
    If (TimeFromMark(T)>5000) Or (Checkstuff) Then
    Begin
      If Debug then
        Writeln('Failed to find bones in inventory');
      Jumper:=True;
      Break;
    End;
  Until WaitUpTextMulti(['ones','Bones','bones','one','Bon','nes','Bo','bo','ne','Drag','agon','drag','gon','Frost','rost','ost','Ashes','Ash','ash','hes'],RandomRange(200,250));

  If Jumper Then
    GoTo Jump;

  If Debug then
    Writeln('Found bones in inventory');

  If WaitUpTextMulti(['Store','tore'],RandomRange(5000,6000))  Then
  Begin
    If Debug then
      Writeln('Found option to store in BOB');

    ClickMouse2(False);

    If WaitOptionMulti(['re-A','-All','ll F','ll D','ll B'],RandomRange(2000,3000)) Then
    Begin
      If Debug then
        Writeln('Found option to deposit all');
      WaitInvCountDec(4000);
      Result:=True;
      BankTime:=2;
    End;
  End;

  Jump:
  MouseBox(420,38,430,46,Mouse_Move);

  If Debug then
    Writeln('Trying to close BOB menu');

  If WaitUpTextMulti(['Close','lose'],2000) Then
    ClickMouse2(True);

  MarkTime(T);
  Repeat
    Wait(100);

    If CheckStuff Then
      Break;

    If TimeFromMark(T)>10000 Then
    Begin
      If Debug Then
        Writeln('Probably failed to close summoning interface');
      Break;
    End;
  Until Not IsUpTextMultiCustom(['Close','lose']);
End;

Function TzBank: Boolean;
Var
  X,Y,H,I,CTS: Integer;
  TPA: TPointArray;
  ATPA: T2DPointArray;
Begin
  If Debug Then
    Writeln('ENTERING TZHAAR BANK FUNCTION');

  Result:=False;

  If (Not(LoggedIn)) Then
    Exit;

  CheckStuff;

  MouseSpeed := RandomRange(18, 23);

  If FindDTMRotated(TzhaarDTM,X,Y,MSX1,MSY1,MSX2,MSY2,-Pi,Pi,Pi/30,aFound) Then
  Begin
    If Debug Then
      Writeln('Found DTM Tzhaar');
    HumanMMouse(X,Y,4,4);
    If (WaitUpTextMulti(['Mej','Talk','Jal'],RandomRange(200,250))) Then
    Begin
      If Debug Then
        Writeln('Found DTM banker');

      ClickMouse2(False);

      If WaitOption('ank',RandomRange(400,500)) Then
      Begin
        If Debug Then
          Writeln('Found DTM option to open bank');
        Result:=True;
        Exit;
      End;
    End;
  End;
  CTS := GetColorToleranceSpeed;
  ColorToleranceSpeed(2);

  SetColorSpeed2Modifiers(0.32, 2.85);
  FindColorsSpiralTolerance(MSCX, MSCY, TPA, 3064035, MSX1, MSY1, MSX2, MSY2, 8);
  ColorToleranceSpeed(CTS);
  SetColorSpeed2Modifiers(0.2, 0.2);

  ATPA := SplitTPAEx(TPA, 10, 10);
  SortATPASize(ATPA,True);

  If Debug Then
    DebugATPABounds(ATPA);

  If (Length(ATPA) = 0) Then
  Begin
    If Debug Then
      Writeln('No colors found for banker');
    Exit;
  End;

  H := High(ATPA);

  For I := 0 To H Do
  Begin
    MiddleTPAEx(ATPA[I], X, Y);

    If Debug Then
      Writeln(tostr(Length(ATPA[I])));

    If (Length(ATPA[I]) < 20) then
      Continue;

    HumanMMouse(X,Y,4,4);

    If (WaitUpTextMulti(['Mej','Talk','Jal'],RandomRange(200,250))) Then
    Begin
      If Debug Then
        Writeln('Found banker');

      ClickMouse2(False);

      If WaitOption('ank',RandomRange(400,500)) Then
      Begin
        If Debug Then
          Writeln('Found option to open bank');
        Result:=True;
        Exit;
      End;
    End;
  End;
End;


 {*******************************************************************************

By: Flight and GGzz

*******************************************************************************}

Function GetRingCount: Integer;
var
  S, S2: String;
begin
  If Debug Then
    Writeln('ENTERING GETRINGCOUNT FUNCTION');
  GameTab(tab_equip);
  if WearingItem(11) then
  begin
    MouseEquippedItem('ring', 3);
    Wait(RandomRange(175, 250));
    S := GetUpText;
    Wait(RandomRange(175, 250));
    S2 := Between('(', ')', S);
    if not (S2 = '') then
    begin
      If Debug Then
        Writeln('We have '+S2+' ring charges left');
      Result := StrToIntDef(S2, 8);
    end
  end else
    Result := 0;
end;

Procedure ToBank;
Var
  X,Y,T,R: integer;
Begin
  If Debug Then
    Writeln('ENTERING TOBANK PROCEDURE');

  If Not LoggedIn Then
    Exit;

  CheckStuff;

  If (GetCurrentTab)<>(Tab_Equip) Then
    WaitGameTab(Tab_Equip,5000);

  If LowerCase(RingType)='duel' Then
  Begin
    If Debug Then
      Writeln('RingType is duel');

    R:= GetRingCount
    Ring:= R - 1;

    If R<>0 Then
    Begin
      If Debug then
        Writeln('Found Ring Teleporting');
      ClickMouse2(False);

      WaitOptionMulti(['astle','Cast','stle'],900);

      If Debug then
        Writeln('Waiting for bank');

      If (GetCurrentTab)<>(Tab_Inv) Then
        WaitGameTab(Tab_Inv,5000);

      If LowerCase(AltarDirection)='s' Then
        MakeCompass('N');
      SetAngle(SRL_ANGLE_HIGH);

      MarkTime(T);
      Repeat
        Wait(Random(100));
        If (TimeFromMark(T)>10000) Or (CheckStuff) Then
        Begin
          If Debug Then
            Writeln('Didnt find bank symbol');
          Break;
        End;
      Until FindSymbol(X,Y,'Bank');
    End Else
    Begin
      Writeln('Couldnt find duel ring to get to bank, TERMINATING');
      TerminateScript;
    End;
  End Else
  Begin
    If Debug Then
      Writeln('Ringtype tzhaar');
    If WaitFindDTMEx(TRingDTM,X,Y,MIX1,MIY1,MIX2,MIY2,50,3000) Then
    Begin
      If Debug then
        Writeln('Found ring, teleporting');

      HumanMMouse(X,Y,4,4);
      ClickMouse2(False);

      WaitOptionMulti(['port','Tele','lepo'],900);

      MarkTime(T);
      Repeat
        Wait(Random(100));
        If TimeFromMark(T)>5000 Then
        Begin
          If Debug Then
            Writeln('Didnt find npc chat for caves');
          Exit;
        End;
      Until FindNPCChatTextMulti(['aves','Cave','Caves'],Nothing);

      TypeSendEx('3',False);

      If Debug then
        Writeln('Waiting for bank');

      If (GetCurrentTab)<>(Tab_Inv) Then
        WaitGameTab(Tab_Inv,5000);

      If LowerCase(AltarDirection)='s' Then
        MakeCompass('N');

      MarkTime(T);
      Repeat
        Wait(Random(100));
        If (TimeFromMark(T)>10000) Or (CheckStuff) Then
        Begin
          If Debug then
            Writeln('Didnt find bank symbol, teleport failed');
          Break;
        End;
      Until (FindSymbol(X,Y,'Bank')) Or (FindSymbol(X,Y,'Minigame'));
    End Else
    Begin
      Writeln('Couldnt find tzhaar ring, TERMINATING');
      TerminateScript;
    End;
  End;
End;

Function BankingFailSafe: Boolean;
Var
  X,Y,H,I,CTS,T: Integer;
  TPA: TPointArray;
  ATPA: T2DPointArray;
Begin
  If Debug then
    Writeln('ENTERING BANKING FAILSAFE FUNCTION');

  If Not Loggedin Then
    Exit;

  CheckStuff;

  MouseSpeed := RandomRange(18, 23);

  CTS := GetColorToleranceSpeed;
  ColorToleranceSpeed(2);

  SetColorSpeed2Modifiers(0.09, 0.59);
  FindColorsSpiralTolerance(MSCX, MSCY, TPA, 11514307, 273, 116, 325, 231, 20);
  ColorToleranceSpeed(CTS);
  SetColorSpeed2Modifiers(0.2, 0.2);

  ATPA := SplitTPAEx(TPA, 10, 10);

  SortATPASize(ATPA,True);

  If Debug Then
    DebugATPABounds(ATPA);

  If (Length(ATPA) = 0) Then
  Begin
    If Debug then
      Writeln('Didnt find any chest colors');
    Exit;
  End;

  H := High(ATPA);

  For I := 0 To H Do
  Begin
    MiddleTPAEx(ATPA[I], X, Y);

    If Debug Then
      Writeln(tostr(Length(ATPA[I])));

    If Length(ATPA[I]) < Lengths then
      Continue;

    HumanMMouse(X,Y,4,4);

     If (WaitUpTextMulti(['Bank','chest','ches','k ch'],RandomRange(300,400))) Then
    Begin
      If Debug then
        Writeln('Found bank uptext');

      ClickMouse2(False);

      If WaitOption('Bank',RandomRange(400,500)) Then
      Begin
        If Debug then
          Writeln('Found use option');
        MarkTime(T);
        Repeat
          Wait(Random(100));
          If CheckStuff Then
            Break;
          If TimeFromMark(T)>6000 Then
          Begin
            If Debug then
              Writeln('Didnt find bankscreen');
            Break;
          End;
        Until(BankScreen Or PinScreen);
        Result:=True;
        Exit;
      End;
    End;
  End;
End;

Procedure WalkToBank;
Var
  X,Y,T: Integer;
Begin
  If Debug then
    Writeln('ENTERING WALKTOBANK PROCEDURE');

  If Not Loggedin Then
    Exit;

  CheckStuff;

  If (BankTime=1) And (LowerCase(RingType)='duel') Then
  Begin
    If Debug then
      Writeln('Walking to bank symbol');

    FindSymbol(X,Y,'Bank');
    HumanMMouse(X,Y,2,2);
    ClickMouse2(True);

    Wait(RandomRange(1000,1200));

    MarkTime(T);
    Repeat
      Wait(Random(110));

      If CheckStuff Then
        WalktoBank;

      If TimeFromMark(T)>10000 Then
      Begin
        If Debug then
          Writeln('Didnt stop moving for too long');
        Break;
      End;
    Until Not Ismoving;
  End;
End;

Function OpenBanks: Boolean;
Var
  V: TVariantArray;
  T: Integer;
Begin
  If Debug then
    Writeln('ENTERING OPENBANKS');

  Result:=False;

  If LowerCase(RingType)='duel' Then
  Begin
    If Debug then
      Writeln('Opening CW chest');
    V:=[SRL_BANK_CW];
    If WaitFuncEx('OpenBankChestEdge',V,100,10000) Then
    Begin
      If Debug then
        Writeln('SRL open chest is true');
      Result:=True;
    End;
  End Else
  Begin
    If Not WaitFunc(@TzBank,100,RandomRange(5000,5500)) Then
    Begin
      If Debug then
        Writeln('Failed to find tzhaar banker, walking closer');

      HumanMMouse(257,43,4,4);

      If WaitUpText('alk',900) Then
        ClickMouse2(True) Else
        Begin
          ClickMouse2(False);
          WaitOption('alk',900);
        End;

      Wait(RandomRange(600,700));
      MarkTime(T);
      Repeat
        Wait(Random(100));
        If TimeFromMark(T)>5000 Then
          Break;
      Until Not IsMoving;

      If Not WaitFunc(@TzBank,100,5000) Then
      Begin
        If Debug then
          Writeln('Failed banking again, trying to telly back');
        ToBank;
        Result:=False;
      End Else
        Result:=True;
    End Else
      Result:=True;
  End;
End;

Procedure WithdrawItems;
Var
  X,Y,T: Integer;
Begin
  If Debug then
    Writeln('ENTERING WITHDRAWITEMS PROCEDURE');

  If (CountItems('DTM',HerbDTM,[]) < 2) Then
    If WaitFindDTMEX(HerbDTM,X,Y,MBX1,MBY1,MBX2,MBY2,50,8000) Then
    Begin
      If Debug then
        Writeln('Found herbs');

      If InvCount>26 Then
        Deposit(6,8,False);

      HumanMMouse(X,Y,4,4);
      ClickMouse2(True);

      WaitInvCountInc(2000);

      If (CountItems('DTM',HerbDTM,[]) < 2) Then
      Begin
        ClickMouse2(True);
        Wait(RandomRange(500,600));
      End;
    End Else
    Begin
      Writeln('Did not find herbs in bank, TERMINATING SCRIPT.');
      TerminateScript;
    End;

    If BankTime>1 Then
    Begin
      If FindDTM(Pouch,X,Y,MIX1,MIY1,MIX2,MIY2) Then
        If UsingFamiliar Then
        Begin
          If Debug then
            Writeln('Found pouch, depositing');
          HumanMMouse(X,Y,4,4);
          ClickMouse2(True);
          WaitInvCountDec(2000);
        End;

      If FindDTM(Summoning,X,Y,MIX1,MIY1,MIX2,MIY2) Then
        If UsingFamiliar Then
        Begin
          If Debug then
            Writeln('Found potion, depositing');
          HumanMMouse(X,Y,4,4);
          ClickMouse2(True);
          WaitInvCountDec(2000);
        End;

      If LowerCase(RingType)='duel' Then
        If FindDTM(RingDTM,X,Y,MIX1,MIY1,MIX2,MIY2) Then
        Begin
          If Debug then
            Writeln('Found extra ring, depositing');
          HumanMMouse(X,Y,4,4);
          ClickMouse2(True);
          WaitInvCountDec(2000);
        End;
    End;

    If Debug Then
      Writeln('PTS=' +tostr(pts));

    If BankTime=1 Then
      If ((PTS<>0) And (M>(NewPouch-5))) Or StartSummon Then
        If (Not UsingFamiliar) Then
        Begin
          If WaitFindDTMEx(Pouch,X,Y,MBX1,MBY1,MBX2,MBY2,100,8000) Then
          Begin
            If Debug then
              Writeln('Found pouch to withdraw');
            HumanMMouse(X,Y,4,4);
            ClickMouse2(True);
            WaitInvCountInc(2000);
          End Else
          Begin
            If Debug then
              Writeln('Did not find pouch to withdraw, setting PTS to 0.');
            PTS:=0;
          End;

          If SummonPoints<10 Then
            If WaitFindDTMEx(Summoning,X,Y,MBX1,MBY1,MBX2,MBY2,100,8000) Then
            Begin
              If Debug then
                Writeln('Found potion to withdraw');
              HumanMMouse(X,Y,4,4);
              ClickMouse2(True);
              WaitInvCountInc(2000);
            End Else
            Begin
              If Debug then
                Writeln('Did not find potion to withdraw, setting PTS to 0.');
              PTS:=0;
            End;
            StartSummon:=False;
        End;

    If (Ring<1) And (LowerCase(RingType)='duel') Then
      If WaitFindDTMEX(RingDTM,X,Y,MBX1,MBY1,MBX2,MBY2,100,8000) Then
      Begin
        If Debug then
          Writeln('Found duel ring to withdraw');

        If InvFull Then
          Deposit(6,8,False);

        HumanMMouse(X,Y,4,4);
        ClickMouse2(True);
        WaitInvCountInc(2000);
      End Else
      Begin
        Writeln('Did not find duel ring in bank, TERMINATING SCRIPT.');
        TerminateScript;
      End;

    MarkTime(T);
    Repeat
      Wait(Random(400));
      If TimeFromMark(T)>5000 Then
      Begin
        If Debug Then
          Writeln('Failed to withdraw bones');
        Break;
      End;
    Until WithdrawEx(9,0,25,['ones','Bones','bones','one','Bon','nes','Bo','bo','ne','Drag','agon','drag','gon','Frost','rost','ost','ashes','Ash','ash','hes'])
End;

Procedure Banking;
Var
  X,Y,T,BT,H,S: Integer;
Label
  Retry;
Begin
  If Debug Then
    Writeln('ENTERING BANKING PROCEDURE');
  BankTime:=1;
  Repeat
    If Debug then
      Writeln('BANKTIME: ' +ToStr(BankTime));

    If Not Loggedin Then
      Exit;

    CheckStuff

    MarkTime(BT);
    Retry:

      If TimeFromMark(BT)>45000 Then
      Begin
        Writeln('Banking Failed, Terminating script.');
        TerminateScript;
      End;

      If (LowerCase(RingType)='duel') And (Not FindSymbol(X,Y,'Bank')) Then
      Begin
        If Debug Then
          Writeln('No bank symbol, exiting procedure');
        Exit;
      End;

      If (LowerCase(RingType)='tzhaar') And (Not FindSymbol(X,Y,'Bank') And (Not FindSymbol(X,Y,'Minigame'))) Then
      Begin
        If Debug Then
          Writeln('No bank or minigame symbol found, exiting procedure');
        Exit;
      End;

      If (InvFull) And (CountItems('DTM',HerbDTM,[]) = 2) Then
      Begin
        If Debug Then
          Writeln('Inventory full, probably breaking loop');
        If ((LowerCase(RingType)='duel') And (Not (Ring<1))) Or (LowerCase(RingType)='tzhaar') Then
          Break;
      End;

      WalkToBank;

      If Debug then
        Writeln('Opening Bank');

      If NoFamiliar Then
        ConvertTime(TimeFromMark(SummoningTimer),H,M,S) Else
        ConvertTime((GetSystemTime)-(SummoningTimer),H,M,S);

      If Debug Then
        Writeln('Summoning Timer in Minutes: '+ToStr(M));
      If (PTS<>0) And (BankTime=1) Then
        If (M>NewPouch) Then
          If (UsingFamiliar) Then
          Begin
            If Debug Then
              Writeln('Time for new familiar');
            DismissFamiliar;
            NoFamiliar:=False;
          End;

      If (Not OpenBanks) And (LowerCase(RingType)='tzhaar') Then
      Begin
        If Debug Then
          Writeln('Failed to open tzhaar bank, going to retry');
        GoTo Retry;
      End;

      If Debug then
        Writeln('Waiting for bank screen');

      MarkTime(T);
      Repeat
        Wait(Random(100));

        If CheckStuff Then
          Break;

        If TimeFromMark(T)>8000 Then
        Begin
          If Debug Then
            Writeln('No bank screen for too long');
          Break;
        End;
      Until(BankScreen Or PinScreen);

      If (Not (BankScreen Or PinScreen)) And (LowerCase(RingType)='duel') Then
      Begin
        If Debug Then
          Writeln('Failed to open bank, tring failsafe method');
        BankingFailSafe;
      End;

      If Not (BankScreen Or PinScreen) Then
      Begin
        If Debug Then
          Writeln('Still not bank screen, going to retry.');
        GoTo Retry;
      End;

      If PinScreen Then
        InPin(Players[CurrentPlayer].Pin);

      WithdrawItems;
      CloseBank;

      MarkTime(T);
      Repeat
        Wait(Random(52));
        If CheckStuff Then
          Break;
        If TimeFromMark(T)>5000 Then
        Begin
          If Debug Then
            Writeln('Inventory still not full, WTF??');
          Break;
        End;
      Until InvFull;

      If Not InvFull Then
        If BankTime=5 Then
        Begin
          Writeln('Failed withdrawing, terminating');
          TerminateScript;
        End Else
          BankTime:=BankTime+1;


      If (Ring<1) And (LowerCase(RingType)='duel') Then
      Begin
        If WaitFindDTMEx(RingDTM,X,Y,MIX1,MIY1,MIX2,MIY2,300,5000) Then
        Begin
          If Debug then
            Writeln('Putting on ring');

          HumanMMouse(X,Y,4,4);
          ClickMouse2(True);
          WaitInvCountDec(2000);
          Ring:=8;
        End Else
        Begin
          Writeln('Did not find duel ring in inventory, TERMINATING SCRIPT.');
          TerminateScript;
        End;
      End;

      If (PTS <> 0) And (FindDTM(Pouch, X, Y, MIX1, MIY1, MIX2, MIY2)) Then
        If Not UsingFamiliar Then
          SummoningRenew(PTS);

      If (BankTime=1) And (PTS<>0) Then
        StoreBOB Else
        InvMouse(1,Mouse_Move);

  Until (InvFull) And (CountItems('DTM',HerbDTM,[]) = 2);

  CheckStuff;

  If (GetCurrentTab)<>(Tab_Inv) Then
    WaitGameTab(Tab_Inv,5000);

  If Not IsUpTextMultiCustom(['reak','Tele','ouse']) Then
  Begin
    MarkTime(T);
    Repeat
      Wait(Random(500));
      CheckStuff;
      If TimeFromMark(T)>10000 Then
      Begin
        Writeln('Did not find telly tab, TERMINATING SCRIPT.');
        TerminateScript;
      End;
    Until FindObjEX(X,Y,['reak','Tele','ouse'],[13706015],18,40,MIX1,MIY1,MIX2,MIY2);

    If Debug then
      Writeln('Clicked Tab');

    HumanMMouse(X,Y,4,4);
  End;
  ClickMouse2(True);

  MarkTime(T);
  Repeat
    Wait(Random(500));
    CheckStuff;
    If TimeFromMark(T)>10000 Then
    Begin
      If Debug Then
        Writeln('Bank symbol still there, WTF?');
      Break;
    End;
  Until Not Findsymbol(X,Y,'Bank');
  MakeCompass(Direction);
End;

Procedure Bounce;
Var
  CTS: Integer;
  TPA: TPointArray;
  ATPA: T2DPointArray;
Begin
  CTS := GetColorToleranceSpeed;
  ColorToleranceSpeed(2);

  SetColorSpeed2Modifiers(0.12, 1.35);
  FindColorsSpiralTolerance(MSCX, MSCY, TPA, 9291216, msx1, msy1, msx2, msy2, 25);
  ColorToleranceSpeed(CTS);
  SetColorSpeed2Modifiers(0.2, 0.2);

  ATPA := TPAtoATPAEx(TPA, 40, 40);

  SortATPASize(ATPA,True);

  MiddleTPAEx(ATPA[0], BounceX, BounceY);
End;

Procedure GetBounds;
Var
  CTS: Integer;
  TPA: TPointArray;
  ATPA: T2DPointArray;
  BurnerBox: TBox;
Begin
  CTS := GetColorToleranceSpeed;
  ColorToleranceSpeed(2);

  SetColorSpeed2Modifiers(0.07, 0.96);
  FindColorsSpiralTolerance(MSCX, MSCY, TPA, 7116467,AltarX1,AltarY1,AltarX2,AltarY2, 13);
  ColorToleranceSpeed(CTS);
  SetColorSpeed2Modifiers(0.2, 0.2);

  ATPA := TPAtoATPAEx(TPA,15,15);

  SortATPASize(ATPA,True);

  If (Length(ATPA) = 0) Then
  Begin
    If Debug Then
      Writeln('No burner colors found, sorry');
    Exit;
  End;

  BurnerBox:=GetTPABounds(ATPA[0]);

  AltarX1:=BurnerBox.X1;
  AltarY1:=BurnerBox.Y1;
  AltarX2:=BurnerBox.X2;
  AltarY2:=BurnerBox.Y2;
End;

Function DTMBurners: Boolean;
Var
  BurnerDTM: Integer;
  X,Y: Integer;
Begin
  If Debug Then
    Writeln('ENTERING DTMBURNERS FUNCTION');

  If (Not(LoggedIn)) Then
    Exit;

  CheckStuff;

  Case LowerCase(BurnerType) Of
    'oak' :       BurnerDTM := DTMFromString('mQwAAAHicY2ZgYKhiYmAohOIVQP48IF4KxPVVlQyXd/YyTGtJZeAH8mGYEQkDAQBcyQiL');
    'mahogany' :  BurnerDTM := DTMFromString('mQwAAAHicY2ZgYKhiYmAohOIVQP48IF4KxPVVlQyXd/YyTGtJZeAH8mGYEQkDAQBcyQiL');
    'marble' :    BurnerDTM := DTMFromString('mggAAAHicY2NgYFgDxJuAeAsQrwDi5UC8AYjPAPFJIL4ExJeB+AQQ3wLiDweUGRyNVBm8LbUYguz1GFxM1BgePbzLwA+Uw4YZcWAIAAB+AhBq');
  End;

  If FindDTMRotated(BurnerDTM,X,Y,AltarX1,AltarY1,AltarX2,AltarY2,-Pi,Pi,Pi/30,aFound) Then
  Begin
    If Debug Then
      Writeln('Found DTM Burner');
    FreeDTM(BurnerDTM);
    HumanMMouse(X,Y,5,5);
    If (WaitUpTextMulti(['ight','cense','Ligh'],RandomRange(300,400))) Then
    Begin
      If Debug then
        Writeln('Found DTM burner uptext');

      If Not ClickLefts Then
      Begin
        ClickMouse2(False);

        If Not WaitOption('ight',RandomRange(400,500)) Then
          Exit;

        If Debug then
          Writeln('Found DTM option to light');
      End Else
      Begin
        ClickMouse2(True);

        If DidYellowClick Then
        Begin
          HumanMMouse(261,177,3,3);
          ClickMouse2(True);
          Exit;
        End;
      End;
      If CountItems('DTM',HerbDTM,[]) = 1 Then
      Begin
        InvMouse(6,Mouse_Move);
        If WaitUpTextMulti(['ury','Bury','ones','bones','shes','tter'],RandomRange(500,600)) Then
        Begin
          ClickMouse2(False);
          If Debug then
            Writeln('Found bones/ashes');
          WaitOptionMulti(['Use','Use ','se '],RandomRange(800,900));
        End;
      End;
      WaitInvCountDec(5000);
      FailedBurners:=0;
      Result:=True;
    End;
  End Else
    FreeDTM(BurnerDTM);
End;

Procedure Burners;
Var
  X,Y,H,I,CTS,T: Integer;
  TPA: TPointArray;
  ATPA: T2DPointArray;
Begin
  If Debug Then
    Writeln('ENTERING BURNERS PROCEDURE');

  If (Not(LoggedIn)) Then
    Exit;

  CheckStuff;

  If Not FindDTM(HerbDTM,X,Y,MIX1,MIY1,MIX2,MIY2) Then
    Exit;

  ClickLefts:=False;

  If Debug Then
    Writeln('Herb present');

  MouseSpeed := RandomRange(18, 23);

  Case LowerCase(AltarDirection) Of
    'n':
      If LowerCase(AltarPlace)='top' Then
      Begin
        If CountItems('DTM',HerbDTM,[]) > 1 Then
        Begin
          ClickLefts:=True;

          AltarX1:=115;
          AltarY1:=50;
          AltarX2:=270;
          AltarY2:=160;

          If Walk Then
          Begin
            HumanMMouse(215,48,4,4);

            If WaitUpText('alk',900) Then
              ClickMouse2(True) Else
              Begin
                ClickMouse2(False);
                WaitOption('alk',900);
              End;

            Wait(RandomRange(600,700));
            MarkTime(T);
            Repeat
              Wait(100);
              If TimeFromMark(T)>5000 Then
                Break;
            Until Not IsMoving;
            Walk:=False;
          End;
        End Else
        Begin
          AltarX1:=404;
          AltarY1:=85;
          AltarX2:=499;
          AltarY2:=194;
        End;
      End Else
        If CountItems('DTM',HerbDTM,[]) > 1 Then
        Begin
          ClickLefts:=True;

          AltarX1:=150;
          AltarY1:=72;
          AltarX2:=258;
          AltarY2:=129;
        End Else
        Begin
          ClickLefts:=True;

          AltarX1:=165;
          AltarY1:=42;
          AltarX2:=262;
          AltarY2:=161;

          If Walk Then
          Begin
            Bounce;
            HumanMMouse(BounceX+40,BounceY,4,4);

            If WaitUpText('alk',900) Then
              ClickMouse2(True) Else
              Begin
                ClickMouse2(False);
                WaitOption('alk',900);
              End;

            Wait(RandomRange(600,700));
            MarkTime(T);
            Repeat
              Wait(100);
              If TimeFromMark(T)>5000 Then
                Break;
            Until Not IsMoving;
            Walk:=False;
          End;
        End;

    's':
      If LowerCase(AltarPlace)='top' Then
      Begin
        If CountItems('DTM',HerbDTM,[]) > 1 Then
        Begin
          ClickLefts:=True;

          AltarX1:=115;
          AltarY1:=50;
          AltarX2:=270;
          AltarY2:=160;


          If Walk Then
          Begin
            HumanMMouse(215,48,4,4);

            If WaitUpText('alk',900) Then
              ClickMouse2(True) Else
              Begin
                ClickMouse2(False);
                WaitOption('alk',900);
              End;

            Wait(RandomRange(600,700));
            MarkTime(T);
            Repeat
              Wait(100);
              If TimeFromMark(T)>5000 Then
                Break;
            Until Not IsMoving;
            Walk:=False;
          End;
        End Else
        Begin
          AltarX1:=400;
          AltarY1:=80;
          AltarX2:=504;
          AltarY2:=200;
        End;
      End Else
        If CountItems('DTM',HerbDTM,[]) > 1 Then
        Begin
          ClickLefts:=True;

          AltarX1:=150;
          AltarY1:=72;
          AltarX2:=258;
          AltarY2:=129;
        End Else
        Begin
          ClickLefts:=True;

          AltarX1:=165;
          AltarY1:=42;
          AltarX2:=262;
          AltarY2:=161;

          If Walk Then
          Begin
            Bounce;
            HumanMMouse(BounceX+40,BounceY,4,4);

            If WaitUpText('alk',900) Then
              ClickMouse2(True) Else
              Begin
                ClickMouse2(False);
                WaitOption('alk',900);
              End;

            Wait(RandomRange(600,700));
            MarkTime(T);
            Repeat
              Wait(100);
              If TimeFromMark(T)>5000 Then
                Break;
            Until Not IsMoving;
            Walk:=False;
          End;
        End;
    'w':
      If LowerCase(AltarPlace)='top' Then
      Begin
        If CountItems('DTM',HerbDTM,[]) > 1 Then
        Begin
          ClickLefts:=True;

          AltarX1:=MSX1;
          AltarY1:=36;
          AltarX2:=69;
          AltarY2:=155;
        End Else
        Begin
          ClickLefts:=True;

          If Walk Then
          Begin
            HumanMMouse(267,287,4,4);

            If WaitUpText('alk',900) Then
              ClickMouse2(True) Else
              Begin
                ClickMouse2(False);
                WaitOption('alk',900);
              End;

            Wait(RandomRange(600,700));
            MarkTime(T);
            Repeat
              Wait(100);
              If TimeFromMark(T)>5000 Then
                Break;
            Until Not IsMoving;
            Walk:=False;
          End;

          AltarX1:=150;
          AltarY1:=188;
          AltarX2:=284;
          AltarY2:=294;
        End;
      End Else
        If CountItems('DTM',HerbDTM,[]) > 1 Then
          ClickLefts:=True;
    'e':
      If LowerCase(AltarPlace)='top' Then
      Begin
        If CountItems('DTM',HerbDTM,[]) > 1 Then
        Begin
          ClickLefts:=True;

          AltarX1:=425;
          AltarY1:=20;
          AltarX2:=515;
          AltarY2:=150;
        End Else
        Begin
          ClickLefts:=True;

          If Walk Then
          Begin
            HumanMMouse(258,311,4,4);

            If WaitUpText('alk',900) Then
              ClickMouse2(True) Else
              Begin
                ClickMouse2(False);
                WaitOption('alk',900);
              End;

            Wait(RandomRange(600,700));
            MarkTime(T);
            Repeat
              Wait(100);
              If TimeFromMark(T)>5000 Then
                Break;
            Until Not IsMoving;
            Walk:=False;
          End;

          AltarX1:=260;
          AltarY1:=153;
          AltarX2:=338;
          AltarY2:=264;
        End;
      End Else
        If CountItems('DTM',HerbDTM,[]) > 1 Then
          ClickLefts:=True
  End;

//  If Debug Then
//    SMART_DrawBoxEx(True,False,IntToBox(AltarX1,AltarY1,AltarX2,AltarY2),clGreen);

  If Not DTMBurners Then
  Begin
    If LowerCase(BurnerType)='oak' Then
      GetBounds;

    CTS := GetColorToleranceSpeed;
    ColorToleranceSpeed(2);

    SetColorSpeed2Modifiers(BurnerHue,BurnerSat);
    FindColorsSpiralTolerance(MSCX,MSCY,TPA,BurnerColor,AltarX1,AltarY1,AltarX2,AltarY2,BurnerTolerance);
    ColorToleranceSpeed(CTS);
    SetColorSpeed2Modifiers(0.2, 0.2);

    ATPA := SplitTPAEx(TPA,10,10);
    SortATPASize(ATPA,False);

    If Debug Then
      DebugATPABounds(ATPA);

    If (Length(ATPA) = 0) Then
    Begin
      If Debug Then
        Writeln('No burner color found, exiting');
      Exit;
    End;

    H := High(ATPA);

    For I := 0 To H Do
    Begin
      MiddleTPAEx(ATPA[I], X, Y);

      If Debug Then
        Writeln(tostr(Length(ATPA[I])));

      If (Length(ATPA[I]) < BurnerLength) Or (Length(ATPA[I]) > MaxLength) then
        Continue;

      If Debug Then
        Writeln(tostr(Length(ATPA[I])));

      HumanMMouse(X,Y,2,2);

      If (WaitUpTextMulti(['ight','cense','Ligh'],RandomRange(300,400))) Then
      Begin
        If Debug then
          Writeln('Found burner uptext');

        If Not ClickLefts Then
        Begin
          ClickMouse2(False);

          If Not WaitOption('ight',RandomRange(400,500)) Then
            Continue;

          If Debug then
            Writeln('Found option to light');
        End Else
        Begin
          ClickMouse2(True);

          If DidYellowClick Then
          Begin
            HumanMMouse(261,177,3,3);
            ClickMouse2(True);
            Continue;
          End;
        End;
        If CountItems('DTM',HerbDTM,[]) = 1 Then
        Begin
          InvMouse(6,Mouse_Move);
          If WaitUpTextMulti(['ury','Bury','ones','bones','shes','tter'],RandomRange(500,600)) Then
          Begin
            ClickMouse2(False);
            If Debug then
              Writeln('Found bones/ashes');
            WaitOptionMulti(['Use','Use ','se '],RandomRange(800,900));
          End;
        End;
        WaitInvCountDec(5000);
        FailedBurners:=0;
        Exit;
      End;
    End;
  End;
End;

Function OpenDoor: Boolean;
Var
  X,Y,H,I,CTS,T: Integer;
  TPA: TPointArray;
  ATPA: T2DPointArray;
Begin
  Result:=False;

  If (Not(LoggedIn)) Then
    Exit;

  CheckStuff;

  If Debug then
    Writeln('ENTERING OPENDOOR FUNCTION');

  If LowerCase(AltarDirection)='s' Then
  Begin
    KeyDown(40);
    Sleep(300 + Random(50));
    KeyUp(40);
    Wait(RandomRange(500,600));
    MakeCompass(Direction);
  End;

  MouseBox(DoorX1,DoorY1,DoorX2,DoorY2,Mouse_Move);

  If Debug Then
    Writeln('Black count: '+ToStr(CountColor(0,407,137,472,213)));

  While CountColor(0,407,137,472,213)> 2000 Do
    Wait(RandomRange(200,300));

  MouseSpeed := RandomRange(18, 23);

  CTS := GetColorToleranceSpeed;
  ColorToleranceSpeed(2);

  SetColorSpeed2Modifiers(DoorHue, DoorSat);
  FindColorsSpiralTolerance(MSCX, MSCY, TPA, DoorColor, DoorX1, DoorY1, DoorX2, DoorY2, DoorTolerance);
  ColorToleranceSpeed(CTS);
  SetColorSpeed2Modifiers(0.2, 0.2);

  ATPA := SplitTPAEx(TPA, 11, 11);
  SortATPASize(ATPA,True);

  If Debug Then
    DebugATPABounds(ATPA);

  If (Length(ATPA) = 0) Then
  Begin
    If Debug Then
      Writeln('No door colors found');
    Exit;
  End;

  H := High(ATPA);

  For I := 0 To H Do
  Begin
    MiddleTPAEx(ATPA[I], X, Y);

    If Debug Then
      Writeln(tostr(Length(ATPA[I])));

    If Length(ATPA[I]) < Lengths then
      Continue;

    HumanMMouse(X,Y,4,4);

    If (WaitUpTextMulti(['Open','pen','oor','Portal','port','tal'],RandomRange(300,400))) Then
    Begin
      If Debug then
        Writeln('Found door uptext');

      ClickMouse2(False);

      If WaitOption('Open',RandomRange(400,500)) Then
      Begin
        If Debug then
          Writeln('Found open option');
        Result:=True;
        If LowerCase(AltarDirection)='s' Then
          SetAngle(SRL_ANGLE_HIGH) Else
          Wait(RandomRange(600,800));
        MarkTime(T);
        Repeat
          Wait(Random(100));
          If TimeFromMark(T)>5000 Then
            Break;
        Until Not IsMoving;
        Exit;
      End;
    End;
  End;
End;

Function DTMAltar: Boolean;
Var
  X,Y: Integer;
Begin
  Result:=False;
  FailDTM:=False;

  If Debug Then
    Writeln('ENTERING DTMALTAR FUNCTION');

  If (Not(LoggedIn)) Then
    Exit;

  CheckStuff;

  If FindDTMRotated(AltarDTM,X,Y,MSX1,MSY1,MSX2,MSY2,-Pi,Pi,Pi/30,aFound) Then
  Begin
    If Debug Then
      Writeln('Found DTM Altar');
    HumanMMouse(X,Y,5,5);
    If (WaitUpTextMulti(['ltar','Alta','Altar'],RandomRange(300,400))) Then
    Begin
      If Debug then
        Writeln('Found altar DTM uptext');

      If Not ClickLefts Then
      Begin
        ClickMouse2(False);

        If Not WaitOptionMulti(['Alta','Altar'],RandomRange(800,900)) Then
        Begin
          FailDTM:=True;
          Exit;
        End;
      End Else
        ClickMouse2(True);

      If Debug then
        Writeln('Found use DTM option');

      MouseBox(222,408,295,447,Mouse_Move);

      If WaitUpTextMulti(['Offer','ffer','All ','Off','Offe'],3000) Then
      Begin
        Wait(RandomRange(100,200));
        ClickMouse2(True);

        If Debug then
          Writeln('Waiting for first DTM bones to go');

        If Not WaitInvCountDec(4000) Then
        Begin
          FailDTM:=True;
          Exit;
        End;

        Result:=True;
      End Else
        If FindBlackChatMessage('reach') Then
        Begin
          Writeln('Couldnt DTM reach altar');
          Exit;
        End Else FailDTM:=True;
    End;
  End;
End;

Function Altar: Boolean;
Var
  X,Y,H,I,CTS,T: Integer;
  TPA: TPointArray;
  ATPA: T2DPointArray;
Begin
  While IsMoving Do
    Wait(Random(100));

  Result:=False;
  ClickLefts:=False;

  If PTS=0 Then
    ClickLefts:=True;

  If Debug Then
    Writeln('ENTERING ALTAR FUNCTION');

  If (Not(LoggedIn)) Then
    Exit;

  CheckStuff;

  If FindDTM(HerbDTM,X,Y,MIX1,MIY1,MIX2,MIY2) Then
    Exit;

  If ((LowerCase(AltarDirection)='n') Or (LowerCase(AltarDirection)='s')) And (LowerCase(AltarPlace)='side') Then
    SetAngle(SRL_ANGLE_HIGH);

  If Debug then
    Writeln('Attempting to use stuff on altar');

  If Not (IsUptextMultiCustom(['ury','Bury','ones','bones','shes','tter']) And (CountColor(16777215,MIX1,MIY1,MIX2,MIY2)=0)) Then
  Begin
    MarkTime(T);
    Repeat
      InvMouse(RandomRange(10,18),3);
      If TimeFromMark(T)>10000 Then
        Exit;
    Until WaitUpTextMulti(['ury','Bury','ones','bones','shes','tter'],RandomRange(1800,2000));
  End;

  If (CountColor(16777215,MIX1,MIY1,MIX2,MIY2)=0) Then
  Begin
    ClickMouse2(False);

    If Debug then
      Writeln('Found bones/ashes');

    If Not WaitOptionMulti(['Use','Use ','se '],RandomRange(800,900)) Then
      Exit;
  End;

  MouseSpeed := RandomRange(18, 23);

  If Not DTMAltar Then
  Begin
    If FailDTM Then
      Altar Else
      Begin
        CTS := GetColorToleranceSpeed;
        ColorToleranceSpeed(2);

        SetColorSpeed2Modifiers(0.12, 1.35);
        FindColorsSpiralTolerance(MSCX, MSCY, TPA, 9291216, msx1, msy1, msx2, msy2, 25);
        ColorToleranceSpeed(CTS);
        SetColorSpeed2Modifiers(0.2, 0.2);

        If PTS=3 Then
          ATPA := TPAtoATPAEx(TPA, 40, 40) Else
          ATPA := SplitTPAEx(TPA, 10, 10);

        SortATPASize(ATPA,True);

        If Debug Then
          DebugATPABounds(ATPA);

        If (Length(ATPA) = 0) Then
        Begin
          If Debug Then
            Writeln('No altar colors found, sorry');
          Exit;
        End;

        H := High(ATPA);

        For I := 0 To H Do
        Begin
          MiddleTPAEx(ATPA[I], X, Y);

          If Debug Then
            Writeln(tostr(Length(ATPA[I])));

          If Length(ATPA[I]) < 100 then
            Continue;

          HumanMMouse(X,Y,5,5);

          If (WaitUpTextMulti(['ltar','Alta','Altar'],RandomRange(300,400))) Then
          Begin
            If Debug then
              Writeln('Found altar uptext');

            If Not ClickLefts Then
            Begin
              ClickMouse2(False);

              If Not WaitOptionMulti(['Alta','Altar'],RandomRange(800,900)) Then
                  Altar;
            End Else
              ClickMouse2(True);

            If Debug then
              Writeln('Found use option');

            MouseBox(222,408,295,447,Mouse_Move);

            If WaitUpTextMulti(['Offer','ffer','All ','Off','Offe'],3000) Then
            Begin
              Wait(RandomRange(100,200));
              ClickMouse2(True);

              If Debug then
              Writeln('Waiting for first bones to go');

              If Not WaitInvCountDec(4000) Then
                Altar;

              Result:= True;
              Exit;
            End Else
              If FindBlackChatMessage('reach') Then
              Begin
                Writeln('Couldnt reach altar');
                Exit;
              End Else Altar;
          End;
        End;
      End;
  End Else
    Result:=True;
End;

Function GetNPCTimer: Integer;
Var
  Text: String;
  T: Integer;
Begin
  MouseBox(697,134,712,151,Mouse_Right);
  If WaitOptionMulti(['Details','tails','etail'],1500) Then
  Begin
    MarkTime(T);
    Repeat
      Wait(100);
      If TimeFromMark(T)>6000 Then
        Exit;
    Until (GetCurrentTab)<>(Tab_Inv);
  End;
  Text:= GetTextAtExWrap(692, 400, 726, 414, 0, 5, 2, 7647428, 10, 'StatChars');
  Text:= Copy(Text, 0, High(Text)-3);
  Result:= StrToIntDef(Text, 0);
End;

Procedure GetBOB;
Begin
  If Not LoggedIn Then
    Exit;

  CheckStuff;

  If Debug then
    Writeln('ENTERING GETBOB PROCEDURE');

  If Not UsingFamiliar Then
  Begin
    If Debug Then
      Writeln('No BOB');
    Exit;
  End;

  If Not IsUpTextMultiCustom(['Take','ake','BoB']) Then
    MouseBox(697,134,712,151,Mouse_Left) Else
    ClickMouse2(True);
  WaitInvCountInc(3000);
End;

Procedure Setup;
Var
  X,Y: Integer;
Begin
  ClearDebug;
  AutoUpdateMe;

  {$IFDEF SIMBAMAJOR980}
    SMART_SERVER := 10;
    SMART_MEMBERS := TRUE;
    SMART_SIGNED := TRUE;
    SMART_SUPERDETAIL := FALSE;
  {$ELSE}
    SRL_SIXHOURFIX := TRUE;
    SMART_FIXSPEED := TRUE;
  {$ENDIF}

  SetupSRL;

  If (SRLStats_Username = '') Then
    SetupSRLStats(1105, 'Anonymous', 'anon1337')
  Else
    SetupSRLStats(1105, SRLStats_Username, SRLStats_Password);


  DeclarePlayers;
  LoginPlayer;

  UseFindMod:=False;

  ToggleXPBar(True);
  StartingExperience := GetXPBarTotal;

  SmartSetRefresh(70);

  AddOnTerminate('F33DTM');
  SetDTM;

  BankTime:=1;
  Ring:=8;

  ClearDebug;
  Writeln('Make sure you have all your settings in correct!');
  Writeln('If you have problems, 90% of the time it is incorrect setup, make sure you double check settings with OP!');
  Writeln('Turn on Debug mode (line 64) if you are still having problems and tell me what it says.');
  Writeln('Also show me a picture of where it is messing up and what you have exactly typed into the script.');

  If (GetCurrentTab)<>(Tab_Equip) Then
    WaitGameTab(Tab_Equip,5000);

  If LowerCase(RingType)='duel' Then
  Begin
    If WaitFindDTMEx(RingDTM,X,Y,MIX1,MIY1,MIX2,MIY2,50,2000) Then
      Ring:=GetRingCount Else
      Ring:=0;
  End Else
    If Not WaitFindDTMEx(TRingDTM,X,Y,MIX1,MIY1,MIX2,MIY2,50,2000) Then
    Begin
      Writeln('Please equip Tzhaar ring before starting');
      TerminateScript;
    End;

  If (GetCurrentTab)<>(Tab_Inv) Then
    WaitGameTab(Tab_Inv,5000);

  Case LowerCase(AltarDirection) Of
    'w':
      Begin DoorX1:=15; DoorY1:=79; DoorX2:=192; DoorY2:=302; Direction:='N'; MakeCompass(Direction);
        If LowerCase(AltarPlace)='side' Then
        Begin
          AltarX1:=MSX1;
          AltarY1:=132;
          AltarX2:=200;
          AltarY2:=263;
        End;
      End;

    'n': Begin DoorX1:=193; DoorY1:=34; DoorX2:=355; DoorY2:=127; Direction:='N'; MakeCompass(Direction); End;

    'e':
      Begin DoorX1:=400; DoorY1:=158; DoorX2:=509; DoorY2:=296; Direction:='N'; AltarX1:=258; AltarY1:=132; AltarX2:=MSX2; AltarY2:=MSY2; MakeCompass(Direction);
        If LowerCase(AltarPlace)='side' Then
        Begin
          AltarX1:=308;
          AltarY1:=73;
          AltarX2:=MSX2;
          AltarY2:=263;
        End;
      End;

    's': Begin DoorX1:=185; DoorY1:=32; DoorX2:=334; DoorY2:=85; Direction:='S'; AltarX1:=MSX1; AltarY1:=MSY1; AltarX2:=MSX2; AltarY2:=MSY2 End;
  End;

  Case LowerCase(HouseDesign) Of
    'zenev'       : Begin DoorHue:=0.21; DoorSat:=0.11; DoorColor:=3027766; DoorTolerance:=11; Lengths:=100; End;
    'basicwood'   : Begin DoorHue:=1.39; DoorSat:=0.21; DoorColor:=2566185; DoorTolerance:=11; Lengths:=40; End;
    'basicstone'  : Begin DoorHue:=0.14; DoorSat:=2.16; DoorColor:=1589079; DoorTolerance:=10; Lengths:=200; End;
    'whitewash'   : Begin DoorHue:=0.06; DoorSat:=0.37; DoorColor:=4610146; DoorTolerance:=11; Lengths:=200; End;
    'tropical'    : Begin DoorHue:=0.01; DoorSat:=0.06; DoorColor:=3298673; DoorTolerance:=14; Lengths:=200; End;
    'fancy'       : Begin DoorHue:=0.09; DoorSat:=0.34; DoorColor:=3885395; DoorTolerance:=13; Lengths:=200; End;
  End;

  Case LowerCase(BurnerType) Of
    'oak'      : Begin BurnerHue:=0.00; BurnerSat:=0.05; BurnerColor:=7303029; BurnerTolerance:=13; MaxLength:=110; BurnerLength:=2;  End;
    'mahogany' : Begin BurnerHue:=0.16; BurnerSat:=0.06; BurnerColor:=6776941; BurnerTolerance:=19; MaxLength:=50;  BurnerLength:=15; End;
    'marble'   : Begin BurnerHue:=0.06; BurnerSat:=1.38; BurnerColor:=2788535; BurnerTolerance:=21; MaxLength:=100; BurnerLength:=10; End;
  End;

  Case PTS Of
    0: Begin Pouch := DTMFromString('mGQAAAHicY2RgYLjJyMCwF0hnB+gzgAAjiAAAKdkChA==');                                                     NewPouch:=0;  Bones:=25; MaxTime:=0;  End;
    1: Begin Pouch := DTMFromString('mQwAAAHicY2ZgYDAGYlsozgLiFCgdGprEcHjfCoZpxXoMIkA+DDMiYSAAAP2yBpQ=');                                 NewPouch:=30; Bones:=37; MaxTime:=36; End;  //terrorbird   1920000    30
    2: Begin Pouch := DTMFromString('mbQAAAHicY2VgYDAFYisg1gNiGyC2BuL3QPwEiD8A8RcgfgfEna4iDFfO7GDQ15BnaHcRAWN+oDg6ZsSCwQAAEz8LfQ==');     NewPouch:=38; Bones:=43; MaxTime:=43; End;          //war tort  2400000  38
    3: Begin Pouch := DTMFromString('mbQAAAHicY2VgYMhlguAkIC4D4hwgfgQUfwXEL4D4NRDfAuJ9+5YwWJsbM9RV5zJsXjeL4djB1QwiQHF0zIgFgwEACPUPaA=='); NewPouch:=50; Bones:=55; MaxTime:=58; End; //packyak     3000000   50
  End;

  SetAngle(SRL_ANGLE_HIGH);

  If UsingFamiliar Then
    SummoningTimer:=(GetSystemTime-((MaxTime-GetNPCTimer)*60*1000)) Else
    NoFamiliar:=True;

  If PTS <> 0 Then
    StartSummon:=True;

  StartTime:= GetSystemTime;
End;

Procedure Mainloop;
Var
  X,Y,T,InitialInv: Integer;
Begin
  If (GetCurrentTab)<>(Tab_Inv) Then
    WaitGameTab(Tab_Inv,5000);

  Banking;

  If Debug then
    Writeln('Waiting for door');

  If WaitFunc(@OpenDoor,100,RandomRange(14000,15000)) Then
  Begin
    MarkTime(T);
    Walk:=True;
    Repeat
      Burners;

      If TimeFromMark(T)>20000 Then
      Begin
        Writeln('Took too long to light burners');
        FailedBurners:=FailedBurners + 1;
        If FailedBurners=5 Then
        Begin
          Writeln('Failed burners too many times, terminating');
          TerminateScript;
        End;
        ToBank;
        Exit;
      End;

      If FindBlackChatMessage('reach') Then
      Begin
        Writeln('Couldnt reach burners, going back to bank');
        ToBank;
        Exit;
      End;
    Until Not FindDTM(HerbDTM,X,Y,mix1,miy1,mix2,miy2);

    If WaitFunc(@Altar,100,RandomRange(14000,15000)) Then
    Begin
      If Debug then
        Writeln('Waiting for inv count 4');

      InitialInv:=InvCount;
      MarkTime(T);
      Repeat
        If CheckStuff Then
        Begin
          Altar;
          MarkTime(T);
        End;

        If InvCount < RandomRange(4,9) Then
          Break;

        If InvCount < InitialInv Then
        Begin
          InitialInv:=InvCount;
          MarkTime(T);
        End;
      Until TimeFromMark(T)>6000;

      If (PTS<>0) Then
        GetBOB;

      If (PTS=3) Then
      Begin
        InitialInv:=InvCount;
        MarkTime(T);
        Repeat
          If CheckStuff Then
          Begin
            Altar;
            MarkTime(T);
          End;

          If InvCount < RandomRange(4,9) Then
            Break;

          If InvCount < InitialInv Then
          Begin
            InitialInv:=InvCount;
            MarkTime(T);
          End;
        Until TimeFromMark(T)>6000;
        GetBOB;
      End;

      If Debug then
        Writeln('Waiting for no more bones');

      InitialInv:=InvCount;
      MarkTime(T);
      Repeat
        If CheckStuff Then
        Begin
          Altar;
          MarkTime(T);
        End;

        If InvCount <= 2 Then
          Break;

        If InvCount < InitialInv Then
        Begin
          InitialInv:=InvCount;
          MarkTime(T);
        End;
      Until TimeFromMark(T)>6000;
    End;
  End;

  ProgressReport;

  If Not LoggedIn Then
    LoginPlayer;

  ToBank;
End;

Begin
  Setup;
  Repeat
    Mainloop;
  Until AllPlayersInactive;
End.
